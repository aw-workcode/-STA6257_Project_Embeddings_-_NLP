---
title: "Using Vector Embeddings For Sentiment Analysis"
author: "Rod Acosta, Kevin Furbish, Ibrahim Khan, Anthony Washington"
format: 
  revealjs:
    theme: moon
    incremental: true
course: STA 6257 - Advanced Statistical Modeling
bibliography: references.bib # file contains bibtex for references
#always_allow_html: true # this allows to get PDF with HTML features
self-contained: true
execute: 
  warning: false
  message: false
editor: 
  markdown: 
    wrap: 72
---

<style>
div.smaller {
font-size: 0.7em;
}
</style>


# 1. Introduction {.smaller .scrollable}

- Sentiment Analysis:
  - Defined as a branch of Natural Language Processing (NLP) that focuses on the computational treatment of opinions, sentiments, and subjectivity in digital text [@MEDHAT20141093].

---

## 1.1 Sentiment Analysis {.smaller .scrollable}

- Importance of Sentiment Analysis:
  - Essential for understanding public opinion, aiding businesses in refining marketing strategies, improving products, and enhancing customer satisfaction.
  - The rise of social media and e-commerce platforms has increased the importance of sentiment analysis for real-time consumer behavior insights.

- Case Study: Twitter Data:
  - Hasan, Maliha, and Arifuzzaman (2019) used Twitter data to demonstrate the potential of sentiment analysis.
  - Their methodology combined Bag of Words (BoW) and Term Frequency-Inverse Document Frequency (TF-IDF) models with logistic regression, achieving an accuracy of 85.25% in classifying tweets as positive or negative [@9036670].

---

<div class="smaller">
- Case Study: E-commerce Reviews:
  - Kathuria, Sethi, and Negi (2022) applied sentiment analysis to e-commerce reviews using various machine learning models (logistic regression, AdaBoost, SVM, Naive Bayes, and random forest).
  - Analyzed the Women’s E-commerce Clothing Reviews dataset to understand consumer behavior and the impact of electronic word-of-mouth (eWOM) on customer attitudes and product sales [@10093674].

- Granular Approach:
  - Nasukawa and Yi (2003) focused on extracting sentiments linked to specific subjects rather than entire documents.
  - Their prototype system used a syntactic parser and sentiment lexicon to detect sentiments in web pages and news articles, offering detailed insights into specific opinions [@nasukawa2003sentiment].
</div>

---

- Conclusion:
  - These studies illustrate the evolution and application of sentiment analysis using NLP, highlighting its critical role in extracting insights from vast amounts of text data for strategic decision-making.
  
---

## 1.2 Vector Embeddings In Natural Language Processing {.smaller}

- Introduction to Embeddings:
  - Vector embeddings are crucial for encoding or describing the sentiment of words or groups of words.
  - Embeddings improve upon representing words as indices in a vocabulary by encoding relationships or similarities between words [@camacho2020embeddings].

- Advantages of Embeddings:
  - Unlike simple vocabulary indices, embeddings can represent multiple meanings of words and their semantic and syntactic patterns [@pennington2014glove].
  - Example: In the Word2Vec model, vector arithmetic can evaluate analogies (e.g., "king" - "man" + "woman" = "queen")[@mikolov2013word2vec].

---

<div class="smaller">
- Advanced Embedding Models:
  - Sentence embeddings build on word embeddings to represent sentences, improving over Bag of Words models, which have high dimensionality and sparseness issues[@pilehvar2020embeddings].
  - Document embeddings further extend this concept to encode entire documents for NLP tasks where word ordering is important[@pilehvar2020embeddings].
</div>

---

## 1.3 Using Embeddings For Sentiment Analysis {.smaller}

- Performance Improvement:
  - Word embedding and deep learning models have significantly enhanced NLP tasks, including sentiment analysis [@10255396].
  - Popular methods include Word2Vec and Global Vectors (GloVe), trained on different datasets (Google News and Wikipedia 2014, respectively) [@10543279].

- Challenges with Pre-trained Embeddings:
  - Pre-trained word embeddings often fail to capture contextual sentiment information, leading to inaccuracies (e.g., mapping "good" and "bad" to neighboring vectors) [@9397340][@7296633].
  - The paper aims to explore these challenges and investigate alternative embedding methods for more accurate sentiment analysis.

---

# Methods

## What is a neural Network?
- A neural network is a type of algorithm that mimics the structure and function 
of the human brain. Their goal is to create an artificial system that can process
and analyze data in a similar way.
- There are different types of neural networks but there are some common elements
between most of them. Those elements are:
  - Artificial Neurons
  - Layers

## Neural Network Layers {.smaller}
- Neural networks usually have three types of layers:
  - Input Layer
  - Hidden layers
  - Output layer
  
![](nnLayers.png){fig-align="center"}

## What are embeddings? {.smaller}
- Embeddings are a technique that allow us to map words or phrases into a corresponding
vector of real numbers, where the position and direction of the vector capture the word's
semantic meaning in relation to other words. 
- They make high-dimensional data like words readable
to our algorithm/model and allows our model to recognize and learn meaningful relationships 
and similarities between words

:::: {.columns}
::: {.column width="40%"}
![](embLayer.png){fig-align="center"}
:::
::: {.column width="60%"}
![](How-Embeddings-Work.jpg){fig-align="center"}
:::
::::

## Dense Layer & Cosine Similarity {.smaller}
:::: {.columns}
::: {.column width="50%"}
- Cosine Similarity
  - Measures the cosine of the angle between two non-zero vectors, providing a measure of similarity.
  - The smaller the angle the higher the similarity between the two vectors.
  - $cosine\_similarity(u,v) = \frac{u.v}{||u|| ||v||}$
![](cosine.jpg){fig-align="center"}
:::
::: {.column width="50%"}
- Dense Layer
  - A logistic regression model with a sigmoid activation function used for binary classification. 
  - It outputs the probability that the input belongs to a positive class.
  - $y=\sigma(W⋅z+b)$
  - Where:
     - z is the flattened input vector.
     - W is the weight vector.
     - b is the bias term.
     - $\sigma(x) = \frac{1}{1+e^{-x}}$ is the sigmoid function.
:::
::::

## Sentiment Analysis
- Through the use of a neural network and it's hidden layers (embedding & dense), and the cosine similarity we are able to take inputs
and classify them as being part of a positive or negative class based on what our model has learned from our training dataset.

# Analysis and Results
## Dataset Description 

::: {.nonincremental}

- Data set of 25,000 movie reviews from IMDB
- Max 30 reviews for each movie since popular movies are rated more often than unpopular movies.
- Includes only the top 5,000 most frequent words, minus the top 50 most frequent words
- IMDB reviews 1-10 star rating converted to a 0-1 scale
- Reviews already in vectorized format

:::

## Vectorization

::: {.nonincremental}

- Neural Networks require numeric inputs, not the natural language of reviews
- Vectorization represents each word with a unique numeric substitution. For example the following texts: 
  - "this is fun", "fun times ahead", "fun is ahead of times"

- Results in a vocabulary of [this, is, fun, times, ahead, of]
- Vectorized observations: [1, 2, 3], [3, 4, 5] and [3, 2, 5, 6, 4]
- TensorFlow includes the IMDB dataset in a vectorized format

:::

# Statistical Modeling
## Neural Network Implementation {.smaller}

::: {.nonincremental}

- Neural network model implemented and trained using TF's Keras
- TF and Keras implemented in Python and accessed from R via Reticulate
- Model learns embeddings for each word in the vocabulary
- Multi-dimensional embedding vectors placed close in the learned vector-space to vectors of similar words
- Similar means having a similar contextual meaning in the training dataset and its sentiment classification
  - "gem" and "favorite" would be similar in context of a movie review, but not in a general context

:::

## Neural Network Implementation {.smaller}

::: {.nonincremental}

- Keras Sequential model (model is built layer-by-layer)
- The neural networks leverages the Keras embedding layer
  - Converts input vocabulary index into a vector of a chosen dimension
  - Dimensionality important hyperparameter that controls compression vs overfitting
- Output of embedding layer is the dimensionality hyperparameter
- Embedding layer connects to a dense layer
- Dense layers require a 1D input vector so embedding layer output is flattened to 1D
- Dense layer has a 1 output unit with sigmoid activation function that receives the flattened embedding output
- Output unit is the sentiment score
- Back-propagation trains embedding layer weights to be similar based on sentiment

:::

## Determining Vector Dimensionality

::: {.nonincremental}

- Number of dimensions for the embeddings must be selected
- Dimensionality selection often done ad hoc, or with grid search
- 2 through 7 dimensions were tested and compared by testing accuracy and qualitatively

:::

## Model Performance: 2D

::: {.nonincremental}

- 2 dimensions had best accuracy, but failed to capture meaning
- Closest embeddings to the embedding for "awful":

| word | cosine similarity |
| -----|-------------------|
| awful| 1.0 |
| lame | 1.0 |
| alcoholic | 1.0 |
| sadly | 0.99 |
| relevant | 0.99|
| are | 0.99 |

:::

## Model Performance: 2D vs 7D {.smaller}

::: {.nonincremental}

- 7 Dimensions had similar accuracy to 2, but better embedding performance

:::

::: {#tbl-panel layout-ncol=2}
| reference word | closest words |
| - | --- |
|awful | lame, alcoholic, sadly, relevant, are |
|mediocre | effort, turkey, terrible, stereotype, repeat |
|perfect | lovers, sing, manager, bath, donald | 
|favorite | deeply, roud, marie, polanski, poetry |

: 2 Dimensions {#tbl-first}

| reference word | closest words |
| - | --- |
|awful | ultimately, painful, sorry, fake, nowhere |
|mediocre | teeth, incompetent, main, disappointing, generous |
|perfect | great, seeking, freedom, tremendous, excellent |
|favorite | paulie, excellent, necessary, great, seeking |

: 7 Dimensions {#tbl-second}

Closest Words By Dimensionality
:::



## Data and Visualization

### Conclusion
The development and analysis of the word embedding model for classifying IMDB movie reviews demonstrated promising results. The optimal number of embedding dimensions was identified as 7, achieving an accuracy of 87.34% on the test dataset. This was determined through extensive experimentation, revealing that higher dimensions, such as 7, provided competitive and consistent accuracy. The model's performance is noteworthy, given the constraints of training on only the top 5000 most common words, minimal data preprocessing, and limiting input sequences to the first 500 words of each review. These factors illustrate the model's robustness and effectiveness in capturing the semantic relationships within the data.

Furthermore, the embedding similarity results showed that the model could meaningfully capture semantic relationships, as evidenced by the coherent and relevant similar words found for terms like "awful," "mediocre," "perfect," and "favorite." The final training session, capped at 10 epochs, ensured the model did not overfit, maintaining its accuracy and reliability. Overall, the model's strong performance under constrained conditions highlights its potential for practical applications in sentiment analysis, offering an efficient and effective solution for understanding and categorizing movie reviews.